package controllers

import (
    "github.com/gofiber/fiber/v2"
    "go.mongodb.org/mongo-driver/bson"
    "{{.BaseModuleName}}/modules/services"
    "{{.BaseModuleName}}/modules/models"
)

type {{.ResourceName}}Controller struct {
    Service *services.{{.ResourceName}}Service
}

func New{{.ResourceName}}Controller(service *services.{{.ResourceName}}Service) *{{.ResourceName}}Controller {
    return &{{.ResourceName}}Controller{Service: service}
}

func (c *{{.ResourceName}}Controller) Create(ctx *fiber.Ctx) error {
    var {{.ResourceNameLower}} models.{{.ResourceName}}
    if err := ctx.BodyParser(&{{.ResourceNameLower}}); err != nil {
        return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
    }

    result, err := c.Service.Create{{.ResourceName}}(&{{.ResourceNameLower}})
    if err != nil {
        return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
    }

    return ctx.Status(fiber.StatusCreated).JSON(result)
}

func (c *{{.ResourceName}}Controller) GetAll(ctx *fiber.Ctx) error {
    results, err := c.Service.GetAll{{.ResourceName}}s()
    if err != nil {
        return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
    }

    return ctx.Status(fiber.StatusOK).JSON(results)
}

func (c *{{.ResourceName}}Controller) GetOne(ctx *fiber.Ctx) error {
    id := ctx.Params("id")
    result, err := c.Service.Get{{.ResourceName}}ByID(id)
    if err != nil {
        return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
    }

    return ctx.Status(fiber.StatusOK).JSON(result)
}

func (c *{{.ResourceName}}Controller) Update(ctx *fiber.Ctx) error {
    id := ctx.Params("id")
    var update bson.M
    if err := ctx.BodyParser(&update); err != nil {
        return ctx.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
    }

    if err := c.Service.Update{{.ResourceName}}(id, update); err != nil {
        return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
    }

    return ctx.Status(fiber.StatusOK).JSON(fiber.Map{"message": "{{.ResourceName}} updated successfully"})
}

func (c *{{.ResourceName}}Controller) Delete(ctx *fiber.Ctx) error {
    id := ctx.Params("id")
    if err := c.Service.Delete{{.ResourceName}}(id); err != nil {
        return ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
    }

    return ctx.Status(fiber.StatusOK).JSON(fiber.Map{"message": "{{.ResourceName}} deleted successfully"})
}